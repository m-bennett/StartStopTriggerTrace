/* 
 * Factory Configuration Manager
 *
 * These are the specifications for Sapience Factory Configuration Manager Web API.  ### Schema Notes  1. required attributes (marked with a *) must be provided in POST or PUT request body and returned in the server response.  2. readOnly attributes will be automatically added to entities by the server. They will be a part of GET response. However, they should not be a part of POST or PUT request. If present in request body, they will be ignored by the server. The only exception to this is the id attribute of all entities. It is marked as readOnly, but must be added in PUT request body, so that the server can identify the entity. ### Association Pattern instead of Creation Pattern  It must be noted that for all POST and PUT endpoints, we follow a standard pattern where child entities are associated and not created. For example, all parent-child relationships should look like this:  ``` Factory:  { // this is the parent entity   \"id\": \"uuid\"   // more fields here   \"groups\": [{ // this is the child entity     \"id\": \"uuid\"     // no more fields here   }] } ```  This pattern requires us to create all child entities first (e.g. POST /fcm/groups) and then associate them with their corresponding parent using POST or PUT request(e.g. POST /fcm/factories or PUT /fcm/factories) as mentioned below:  ``` POST /fcm/groups // send >>> {   // required fields here } // returns the id >>> \"1234-123456\"   POST /fcm/factories // or can be PUT // send >>> {   // some fields here   \"groups\": [{ // we associate it to a group     \"id\": \"1234-123456\"   }] } ```  ### Automatic Bi-directional Mapping  Most of the entities have a bi-directional reference with their children. Relationship should be established from one entity to another entity and the server takes care of establishing bi-directional relationship internally. For example:  ``` Factory:  {   // some fields here   \"groups\": [] // reference to Groups }  Group:  {   // some fields here   \"factory\": {} // reference to Factory } ```  In such cases, you only need to set the relationship from one side and other side will be internaly set by the server. For example:  ``` GET /fcm/groups/1234-123456 // returns >>> {   // some fields here   \"factory\": null // currently not assigned to a factory }   PUT /fcm/factories/5678-567890 // send >>> {   // some fields here   \"groups\": [{ // we associate it to a group     \"id\": \"1234-123456\"   }] }   GET /fcm/groups/1234-123456 // returns >>> {   // some fields here   \"factory\": { // automatically got associated to the factory     \"id\": \"5678-567890\"   } } ```  ### References  - **Open API Specification** [https://swagger.io/specification/](https://swagger.io/specification/)  Â© Cimetrix 2020 
 *
 * OpenAPI spec version: 0.3.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using StartStopTriggerTrace.Client;
using StartStopTriggerTrace.Models;

namespace Fcm.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IConfigurationFileApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Json of a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FcmConfigurationFilesAsJsonIdGet (string authorization, string id);

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FcmConfigurationFilesAsJsonIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Delete a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse FcmConfigurationFilesIdDelete (string authorization, string id);

        /// <summary>
        /// Delete a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> FcmConfigurationFilesIdDeleteWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Retrieve a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>byte[]</returns>
        byte[] FcmConfigurationFilesIdGet (string authorization, string id);

        /// <summary>
        /// Retrieve a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FcmConfigurationFilesIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Upload a Configuration File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>CreateResponse</returns>
        CreateResponse FcmConfigurationFilesPost (string authorization, string protocol, byte[] file = null, string description = null);

        /// <summary>
        /// Upload a Configuration File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> FcmConfigurationFilesPostWithHttpInfo (string authorization, string protocol, byte[] file = null, string description = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Json of a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> FcmConfigurationFilesAsJsonIdGetAsync (string authorization, string id);

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> FcmConfigurationFilesAsJsonIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Delete a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> FcmConfigurationFilesIdDeleteAsync (string authorization, string id);

        /// <summary>
        /// Delete a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> FcmConfigurationFilesIdDeleteAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Retrieve a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FcmConfigurationFilesIdGetAsync (string authorization, string id);

        /// <summary>
        /// Retrieve a Configuration File based on ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FcmConfigurationFilesIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Upload a Configuration File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> FcmConfigurationFilesPostAsync (string authorization, string protocol, byte[] file = null, string description = null);

        /// <summary>
        /// Upload a Configuration File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> FcmConfigurationFilesPostAsyncWithHttpInfo (string authorization, string protocol, byte[] file = null, string description = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ConfigurationFileApi : IConfigurationFileApi
    {
        private StartStopTriggerTrace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationFileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationFileApi(String basePath)
        {
            this.Configuration = new StartStopTriggerTrace.Client.Configuration { BasePath = basePath };

            ExceptionFactory = StartStopTriggerTrace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationFileApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConfigurationFileApi()
        {
            this.Configuration = StartStopTriggerTrace.Client.Configuration.Default;

            ExceptionFactory = StartStopTriggerTrace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationFileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationFileApi(StartStopTriggerTrace.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = StartStopTriggerTrace.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = StartStopTriggerTrace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StartStopTriggerTrace.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StartStopTriggerTrace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FcmConfigurationFilesAsJsonIdGet (string authorization, string id)
        {
             ApiResponse<List<string>> localVarResponse = FcmConfigurationFilesAsJsonIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > FcmConfigurationFilesAsJsonIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesAsJsonIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesAsJsonIdGet");

            var localVarPath = "/fcm/configurationFiles/asJson/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesAsJsonIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> FcmConfigurationFilesAsJsonIdGetAsync (string authorization, string id)
        {
             ApiResponse<List<string>> localVarResponse = await FcmConfigurationFilesAsJsonIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Json of a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> FcmConfigurationFilesAsJsonIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesAsJsonIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesAsJsonIdGet");

            var localVarPath = "/fcm/configurationFiles/asJson/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesAsJsonIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Delete a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse FcmConfigurationFilesIdDelete (string authorization, string id)
        {
             ApiResponse<SuccessResponse> localVarResponse = FcmConfigurationFilesIdDeleteWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > FcmConfigurationFilesIdDeleteWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesIdDelete");

            var localVarPath = "/fcm/configurationFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Delete a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> FcmConfigurationFilesIdDeleteAsync (string authorization, string id)
        {
             ApiResponse<SuccessResponse> localVarResponse = await FcmConfigurationFilesIdDeleteAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> FcmConfigurationFilesIdDeleteAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesIdDelete");

            var localVarPath = "/fcm/configurationFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        /// Retrieve a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>byte[]</returns>
        public byte[] FcmConfigurationFilesIdGet (string authorization, string id)
        {
             ApiResponse<byte[]> localVarResponse = FcmConfigurationFilesIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FcmConfigurationFilesIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesIdGet");

            var localVarPath = "/fcm/configurationFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Retrieve a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FcmConfigurationFilesIdGetAsync (string authorization, string id)
        {
             ApiResponse<byte[]> localVarResponse = await FcmConfigurationFilesIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Configuration File based on ID 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="id">Entity ID, in UUID format</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FcmConfigurationFilesIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ConfigurationFileApi->FcmConfigurationFilesIdGet");

            var localVarPath = "/fcm/configurationFiles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Upload a Configuration File 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse FcmConfigurationFilesPost (string authorization, string protocol, byte[] file = null, string description = null)
        {
             ApiResponse<CreateResponse> localVarResponse = FcmConfigurationFilesPostWithHttpInfo(authorization, protocol, file, description);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a Configuration File 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public ApiResponse< CreateResponse > FcmConfigurationFilesPostWithHttpInfo (string authorization, string protocol, byte[] file = null, string description = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesPost");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling ConfigurationFileApi->FcmConfigurationFilesPost");

            var localVarPath = "/fcm/configurationFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// Upload a Configuration File 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> FcmConfigurationFilesPostAsync (string authorization, string protocol, byte[] file = null, string description = null)
        {
             ApiResponse<CreateResponse> localVarResponse = await FcmConfigurationFilesPostAsyncWithHttpInfo(authorization, protocol, file, description);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a Configuration File 
        /// </summary>
        /// <exception cref="StartStopTriggerTrace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer JWT token verified to ensure request is from valid consumer. Format \&quot;Bearer &lt;jwt-token&gt;\&quot;. Example, \&quot;Bearer eyJ0eXAiOiJKV1QiLCJhbGc....\&quot;</param>
        /// <param name="protocol"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResponse>> FcmConfigurationFilesPostAsyncWithHttpInfo (string authorization, string protocol, byte[] file = null, string description = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConfigurationFileApi->FcmConfigurationFilesPost");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling ConfigurationFileApi->FcmConfigurationFilesPost");

            var localVarPath = "/fcm/configurationFiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            // authentication (bearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FcmConfigurationFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

    }
}
